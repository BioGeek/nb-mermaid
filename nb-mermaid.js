// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["require", "jquery", "underscore"], function(require, $, _) {
    var NotebookMermaid, d3, init, mermaid;
    mermaid = d3 = null;
    NotebookMermaid = (function() {
      function NotebookMermaid() {
        this.initNotebook = bind(this.initNotebook, this);
        this.initDeps = bind(this.initDeps, this);
        require([this.toUrl(this.mmp("mermaid.min.js"))], this.initDeps);
      }

      NotebookMermaid.prototype.toUrl = function(url) {
        return require.toUrl(url);
      };

      NotebookMermaid.prototype.mmp = function(f) {
        return "./lib/mermaid/dist/" + f;
      };

      NotebookMermaid.prototype.initDeps = function(_m) {
        mermaid = _m;
        d3 = window.d3;
        this.initCSS();
        return this.initEnv();
      };

      NotebookMermaid.prototype.initCSS = function() {
        return d3.select("head").selectAll("link.mermaid_style").data(["mermaid.css", "mermaid.forest.css"].map(this.mmp)).enter().append("link").attr({
          rel: "stylesheet",
          href: this.toUrl
        });
      };

      NotebookMermaid.prototype.initEnv = function() {
        return require(["base/js/events"], this.initNotebook, this.initStatic);
      };

      NotebookMermaid.prototype.initStatic = function() {
        return mermaid.init();
      };

      NotebookMermaid.prototype.initNotebook = function(events) {
        this.initStatic();
        return events.on("rendered.MarkdownCell", this.markdownRendered);
      };

      NotebookMermaid.prototype.markdownRendered = function(evt, arg) {
        var cell;
        cell = arg.cell;
        return mermaid.init(void 0, cell.element.find(".mermaid"));
      };

      return NotebookMermaid;

    })();
    init = function() {
      return new NotebookMermaid;
    };
    return init.load_ipython_extension = init;
  });

}).call(this);
